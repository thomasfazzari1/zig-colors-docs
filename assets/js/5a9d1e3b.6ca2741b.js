"use strict";(self.webpackChunkzig_colors_docs=self.webpackChunkzig_colors_docs||[]).push([[99],{6639:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"api/styles","title":"Text Styles","description":"Documentation for text styling features including bold, italic, underline, and more.","source":"@site/versioned_docs/version-0.1.0/api/styles.md","sourceDirName":"api","slug":"/api/styles","permalink":"/zig-colors-docs/api/styles","draft":false,"unlisted":false,"tags":[],"version":"0.1.0","sidebarPosition":2,"frontMatter":{"title":"Text Styles","sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Colors","permalink":"/zig-colors-docs/api/colors"},"next":{"title":"Background Colors","permalink":"/zig-colors-docs/api/backgrounds"}}');var t=l(4848),r=l(8453);const i={title:"Text Styles",sidebar_position:2},o="Styles API Reference",d={},c=[{value:"StyleCode Enum",id:"stylecode-enum",level:2},{value:"Pre-defined Style Objects",id:"pre-defined-style-objects",level:2},{value:"Style Struct",id:"style-struct",level:2},{value:"Style Methods",id:"style-methods",level:2},{value:"Text Formatting",id:"text-formatting",level:3},{value:"Applying Styles",id:"applying-styles",level:3},{value:"StyledText Struct",id:"styledtext-struct",level:2},{value:"Combining Styles",id:"combining-styles",level:2},{value:"With Colors",id:"with-colors",level:3},{value:"With Backgrounds",id:"with-backgrounds",level:3},{value:"Complex Combinations",id:"complex-combinations",level:3},{value:"Style Composition",id:"style-composition",level:2},{value:"Building Custom Styles",id:"building-custom-styles",level:3},{value:"Style Inheritance",id:"style-inheritance",level:3},{value:"Platform Support",id:"platform-support",level:2},{value:"Terminal Compatibility",id:"terminal-compatibility",level:3},{value:"Checking Support",id:"checking-support",level:3},{value:"Advanced Examples",id:"advanced-examples",level:2},{value:"Log Formatter",id:"log-formatter",level:3},{value:"Emphasis Levels",id:"emphasis-levels",level:3},{value:"Style Templates",id:"style-templates",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Error Formatting",id:"error-formatting",level:3},{value:"Progress States",id:"progress-states",level:3},{value:"See Also",id:"see-also",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"styles-api-reference",children:"Styles API Reference"})}),"\n",(0,t.jsx)(n.p,{children:"Documentation for text styling features including bold, italic, underline, and more."}),"\n",(0,t.jsx)(n.h2,{id:"stylecode-enum",children:"StyleCode Enum"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:"pub const StyleCode = enum(u8) {\n    reset = 0,\n    bold = 1,\n    dim = 2,\n    italic = 3,\n    underline = 4,\n    blink = 5,\n    reverse = 7,\n    hidden = 8,\n    strikethrough = 9,\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"pre-defined-style-objects",children:"Pre-defined Style Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:"pub const bold: Style\npub const dim: Style\npub const italic: Style\npub const underline: Style\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'std.debug.print("{}\\n", .{colors.bold.call("Bold text")});\nstd.debug.print("{}\\n", .{colors.italic.call("Italic text")});\nstd.debug.print("{}\\n", .{colors.underline.call("Underlined text")});\nstd.debug.print("{}\\n", .{colors.dim.call("Dimmed text")});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"style-struct",children:"Style Struct"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:"pub const Style = struct {\n    fg: ?Color = null,\n    bg: ?Color = null,\n    fg_rgb: ?RGB = null,\n    bg_rgb: ?RGB = null,\n    bold_on: bool = false,\n    dim_on: bool = false,\n    italic_on: bool = false,\n    underline_on: bool = false,\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"style-methods",children:"Style Methods"}),"\n",(0,t.jsx)(n.h3,{id:"text-formatting",children:"Text Formatting"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:"pub fn bold(self: Style) Style\npub fn dim(self: Style) Style\npub fn italic(self: Style) Style\npub fn underline(self: Style) Style\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns a new ",(0,t.jsx)(n.code,{children:"Style"})," with the specified formatting enabled."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'// Single style\ncolors.red.bold().call("Bold red text")\n\n// Multiple styles\ncolors.green.bold().italic().underline().call("Styled text")\n\n// Starting with style\ncolors.bold.red().call("Also bold red")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"applying-styles",children:"Applying Styles"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:"pub fn call(self: Style, text: []const u8) StyledText\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Applies the style to text and returns a formattable ",(0,t.jsx)(n.code,{children:"StyledText"})," object."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"text"}),": The text to style"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Returns:"})," ",(0,t.jsx)(n.code,{children:"StyledText"})," object that can be formatted"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'const styled = colors.red.bold().call("Error!");\nstd.debug.print("{}\\n", .{styled});\n'})}),"\n",(0,t.jsx)(n.h2,{id:"styledtext-struct",children:"StyledText Struct"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:"pub const StyledText = struct {\n    style: Style,\n    text: []const u8,\n\n    pub fn format(self: StyledText, comptime fmt: []const u8, options: std.fmt.FormatOptions, writer: anytype) !void\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"StyledText"})," struct implements the ",(0,t.jsx)(n.code,{children:"format"})," function, making it compatible with Zig's formatting system."]}),"\n",(0,t.jsx)(n.h2,{id:"combining-styles",children:"Combining Styles"}),"\n",(0,t.jsx)(n.h3,{id:"with-colors",children:"With Colors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'// Color + style\ncolors.red.bold().call("Bold red")\ncolors.green.italic().call("Italic green")\ncolors.blue.underline().call("Underlined blue")\n\n// Multiple styles\ncolors.yellow.bold().italic().call("Bold italic yellow")\ncolors.cyan.dim().underline().call("Dim underlined cyan")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"with-backgrounds",children:"With Backgrounds"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'// Style + color + background\ncolors.white.bgRed().bold().call("Bold white on red")\ncolors.black.bgYellow().underline().call("Underlined black on yellow")\n'})}),"\n",(0,t.jsx)(n.h3,{id:"complex-combinations",children:"Complex Combinations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'// All together\ncolors.brightWhite\n    .bgBlue()\n    .bold()\n    .underline()\n    .call("Highlighted text")\n'})}),"\n",(0,t.jsx)(n.h2,{id:"style-composition",children:"Style Composition"}),"\n",(0,t.jsx)(n.h3,{id:"building-custom-styles",children:"Building Custom Styles"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'pub fn createHeaderStyle(level: u8) colors.Style {\n    return switch (level) {\n        1 => colors.bold.underline(),\n        2 => colors.bold,\n        3 => colors.underline,\n        else => colors.Style{},\n    };\n}\n\n// Usage\nstd.debug.print("{}\\n", .{createHeaderStyle(1).call("Main Title")});\nstd.debug.print("{}\\n", .{createHeaderStyle(2).call("Subtitle")});\nstd.debug.print("{}\\n", .{createHeaderStyle(3).call("Section")});\n'})}),"\n",(0,t.jsx)(n.h3,{id:"style-inheritance",children:"Style Inheritance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:"// Base style\nconst base = colors.blue.bold();\n\n// Extend base style\nconst error = base.red();  // Bold red (color overrides blue)\nconst warning = base.yellow();  // Bold yellow\nconst success = base.green();  // Bold green\n"})}),"\n",(0,t.jsx)(n.h2,{id:"platform-support",children:"Platform Support"}),"\n",(0,t.jsx)(n.h3,{id:"terminal-compatibility",children:"Terminal Compatibility"}),"\n",(0,t.jsx)(n.p,{children:"Not all terminals support all styles:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Style"}),(0,t.jsx)(n.th,{children:"Windows Terminal"}),(0,t.jsx)(n.th,{children:"macOS Terminal"}),(0,t.jsx)(n.th,{children:"iTerm2"}),(0,t.jsx)(n.th,{children:"Linux Terminal"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Bold"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"\u2713"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Dim"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"\u2713"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Italic"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"\u2717"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"Varies"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Underline"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"\u2713"}),(0,t.jsx)(n.td,{children:"\u2713"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"checking-support",children:"Checking Support"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'// Graceful degradation\npub fn styledHeader(text: []const u8) void {\n    if (colors.isSupported()) {\n        std.debug.print("{}\\n", .{colors.bold.underline().call(text)});\n    } else {\n        std.debug.print("=== {s} ===\\n", .{text});\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-examples",children:"Advanced Examples"}),"\n",(0,t.jsx)(n.h3,{id:"log-formatter",children:"Log Formatter"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'const LogFormatter = struct {\n    show_timestamp: bool = true,\n    show_level: bool = true,\n\n    pub fn format(self: LogFormatter, level: LogLevel, message: []const u8) void {\n        const style = switch (level) {\n            .debug => colors.dim,\n            .info => colors.Style{},\n            .warn => colors.yellow.bold(),\n            .err => colors.red.bold(),\n        };\n\n        if (self.show_timestamp) {\n            std.debug.print("{} ", .{colors.dim.call("[2024-01-15 10:30:45]")});\n        }\n\n        if (self.show_level) {\n            const level_text = switch (level) {\n                .debug => "DEBUG",\n                .info => "INFO",\n                .warn => "WARN",\n                .err => "ERROR",\n            };\n            std.debug.print("[{}] ", .{style.call(level_text)});\n        }\n\n        std.debug.print("{s}\\n", .{message});\n    }\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"emphasis-levels",children:"Emphasis Levels"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'pub const Emphasis = enum {\n    subtle,\n    normal,\n    strong,\n    critical,\n\n    pub fn toStyle(self: Emphasis) colors.Style {\n        return switch (self) {\n            .subtle => colors.dim,\n            .normal => colors.Style{},\n            .strong => colors.bold,\n            .critical => colors.red.bold().underline(),\n        };\n    }\n};\n\n// Usage\npub fn emphasize(text: []const u8, level: Emphasis) void {\n    std.debug.print("{}\\n", .{level.toStyle().call(text)});\n}\n\nemphasize("Debug info", .subtle);\nemphasize("Normal text", .normal);\nemphasize("Important!", .strong);\nemphasize("CRITICAL ERROR", .critical);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"style-templates",children:"Style Templates"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:"const Templates = struct {\n    // Headers\n    const h1 = colors.bold.underline();\n    const h2 = colors.bold;\n    const h3 = colors.underline;\n\n    // Code elements\n    const keyword = colors.blue.bold();\n    const string = colors.green;\n    const comment = colors.dim.italic();\n    const error = colors.red.underline();\n\n    // UI elements\n    const selected = colors.white.bgBlue().bold();\n    const disabled = colors.dim;\n    const highlight = colors.yellow.bold();\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Terminal Detection"}),": Not all terminals support all styles. Always check support."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Accessibility"}),": Don't rely solely on styling for meaning. Use clear text too."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistency"}),": Use the same styles for the same types of content."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Subtlety"}),": Less is often more. Don't over-style your output."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"}),": Style objects are lightweight and can be pre-computed."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"error-formatting",children:"Error Formatting"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'pub fn formatError(err: anyerror, details: []const u8) void {\n    std.debug.print("{}: {s}\\n", .{\n        colors.red.bold().call(@errorName(err)),\n        details\n    });\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"progress-states",children:"Progress States"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-zig",children:'pub fn showTaskStatus(name: []const u8, status: TaskStatus) void {\n    const style = switch (status) {\n        .pending => colors.dim,\n        .running => colors.blue.bold(),\n        .success => colors.green,\n        .failed => colors.red.bold(),\n        .skipped => colors.yellow.dim(),\n    };\n\n    std.debug.print("[{}] {s}\\n", .{\n        style.call(@tagName(status)),\n        name\n    });\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/zig-colors-docs/api/colors",children:"Colors API"})," - Color methods and constants"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/zig-colors-docs/api/backgrounds",children:"Backgrounds API"})," - Background color styling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/zig-colors-docs/api/rgb-hex",children:"RGB & Hex API"})," - Custom color support"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/zig-colors-docs/api/utilities",children:"Utilities API"})," - Helper functions and configuration"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>i,x:()=>o});var s=l(6540);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);