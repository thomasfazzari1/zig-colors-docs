"use strict";(self.webpackChunkzig_colors_docs=self.webpackChunkzig_colors_docs||[]).push([[897],{3838:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/utilities","title":"Utilities","description":"Documentation for utility functions, initialization, and configuration options.","source":"@site/versioned_docs/version-0.1.0/api/utilities.md","sourceDirName":"api","slug":"/api/utilities","permalink":"/zig-colors-docs/api/utilities","draft":false,"unlisted":false,"tags":[],"version":"0.1.0","sidebarPosition":5,"frontMatter":{"title":"Utilities","sidebar_position":5},"sidebar":"docsSidebar","previous":{"title":"RGB & Hex Colors","permalink":"/zig-colors-docs/api/rgb-hex"},"next":{"title":"Basic Usage","permalink":"/zig-colors-docs/examples/basic-usage"}}');var i=l(4848),r=l(8453);const o={title:"Utilities",sidebar_position:5},t="Utilities API Reference",c={},d=[{value:"Initialization Functions",id:"initialization-functions",level:2},{value:"init",id:"init",level:3},{value:"deinit",id:"deinit",level:3},{value:"Detection Functions",id:"detection-functions",level:2},{value:"isSupported",id:"issupported",level:3},{value:"getLevel",id:"getlevel",level:3},{value:"Configuration Functions",id:"configuration-functions",level:2},{value:"setLevel",id:"setlevel",level:3},{value:"setEnabled",id:"setenabled",level:3},{value:"Utility Functions",id:"utility-functions",level:2},{value:"print",id:"print",level:3},{value:"strip",id:"strip",level:3},{value:"Environment Variables",id:"environment-variables",level:2},{value:"NO_COLOR",id:"no_color",level:3},{value:"COLORTERM",id:"colorterm",level:3},{value:"TERM",id:"term",level:3},{value:"Platform-Specific Behavior",id:"platform-specific-behavior",level:2},{value:"Windows",id:"windows",level:3},{value:"Unix-like Systems",id:"unix-like-systems",level:3},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Custom Detection",id:"custom-detection",level:3},{value:"Configuration Struct",id:"configuration-struct",level:3},{value:"Performance Tips",id:"performance-tips",level:2},{value:"Pre-compute Styles",id:"pre-compute-styles",level:3},{value:"Conditional Styling",id:"conditional-styling",level:3},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Testing",id:"testing",level:2},{value:"Testing with Colors",id:"testing-with-colors",level:3},{value:"Mock Terminal",id:"mock-terminal",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Output",id:"debug-output",level:3},{value:"See Also",id:"see-also",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"utilities-api-reference",children:"Utilities API Reference"})}),"\n",(0,i.jsx)(n.p,{children:"Documentation for utility functions, initialization, and configuration options."}),"\n",(0,i.jsx)(n.h2,{id:"initialization-functions",children:"Initialization Functions"}),"\n",(0,i.jsx)(n.h3,{id:"init",children:"init"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"pub fn init() void\n"})}),"\n",(0,i.jsx)(n.p,{children:"Initializes color support detection. Should be called at program startup."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Effects:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Detects terminal color capabilities"}),"\n",(0,i.jsx)(n.li,{children:"Sets the global color level"}),"\n",(0,i.jsx)(n.li,{children:"Enables color output"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"pub fn main() !void {\n    colors.init();\n    defer colors.deinit();\n\n    // Your colorful code here\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"deinit",children:"deinit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"pub fn deinit() void\n"})}),"\n",(0,i.jsx)(n.p,{children:"Cleanup function that resets terminal styles. Should be called at program exit."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Effects:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Sends reset sequence to terminal"}),"\n",(0,i.jsx)(n.li,{children:"Ensures no styles persist after program exit"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"detection-functions",children:"Detection Functions"}),"\n",(0,i.jsx)(n.h3,{id:"issupported",children:"isSupported"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"pub fn isSupported() bool\n"})}),"\n",(0,i.jsx)(n.p,{children:"Checks if colors are supported in the current environment."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"true"})," if colors are enabled and supported, ",(0,i.jsx)(n.code,{children:"false"})," otherwise"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'if (colors.isSupported()) {\n    std.debug.print("{}\\n", .{colors.green.call("\u2713 Colors supported!")});\n} else {\n    std.debug.print("\u2713 Colors not supported\\n", .{});\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"getlevel",children:"getLevel"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"pub fn getLevel() Level\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the current color support level."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," ",(0,i.jsx)(n.code,{children:"Level"})," enum value indicating color support"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'const level = colors.getLevel();\nswitch (level) {\n    .none => std.debug.print("No color support\\n", .{}),\n    .basic => std.debug.print("16 colors\\n", .{}),\n    .ansi256 => std.debug.print("256 colors\\n", .{}),\n    .truecolor => std.debug.print("16M colors (RGB)\\n", .{}),\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration-functions",children:"Configuration Functions"}),"\n",(0,i.jsx)(n.h3,{id:"setlevel",children:"setLevel"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"pub fn setLevel(level: Level) void\n"})}),"\n",(0,i.jsx)(n.p,{children:"Manually sets the color support level."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"level"}),": The color level to set"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"// Force basic 16-color mode\ncolors.setLevel(.basic);\n\n// Disable colors entirely\ncolors.setLevel(.none);\n\n// Force truecolor mode\ncolors.setLevel(.truecolor);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"setenabled",children:"setEnabled"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"pub fn setEnabled(enable: bool) void\n"})}),"\n",(0,i.jsx)(n.p,{children:"Enables or disables color output globally."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"enable"}),": ",(0,i.jsx)(n.code,{children:"true"})," to enable colors, ",(0,i.jsx)(n.code,{children:"false"})," to disable"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"// Disable colors for piped output\nif (!std.io.getStdOut().isTty()) {\n    colors.setEnabled(false);\n}\n\n// Disable colors based on user preference\nif (args.no_color) {\n    colors.setEnabled(false);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"utility-functions",children:"Utility Functions"}),"\n",(0,i.jsx)(n.h3,{id:"print",children:"print"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"pub fn print(style: anytype, comptime fmt: []const u8, args: anytype) !void\n"})}),"\n",(0,i.jsx)(n.p,{children:"Convenience function for printing styled text with formatting."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"style"}),": Either a ",(0,i.jsx)(n.code,{children:"Color"})," or ",(0,i.jsx)(n.code,{children:"Style"})," to apply"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"fmt"}),": Format string (comptime)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"args"}),": Format arguments"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'// With color\ntry colors.print(.red, "Error: {s}\\n", .{error_msg});\n\n// With style\ntry colors.print(colors.green.bold(), "Success: {} items processed\\n", .{count});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"strip",children:"strip"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"pub fn strip(text: []const u8, allocator: std.mem.Allocator) ![]u8\n"})}),"\n",(0,i.jsx)(n.p,{children:"Removes all ANSI escape codes from text."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"text"}),": Text potentially containing ANSI codes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"allocator"}),": Allocator for result string"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns:"})," New string with ANSI codes removed"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'const styled = colors.red.bold().call("Error!");\nconst plain = try colors.strip(std.fmt.allocPrint(allocator, "{}", .{styled}), allocator);\ndefer allocator.free(plain);\n// plain = "Error!"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(n.p,{children:"zig-colors respects standard environment variables:"}),"\n",(0,i.jsx)(n.h3,{id:"no_color",children:"NO_COLOR"}),"\n",(0,i.jsx)(n.p,{children:"When set (to any value), disables all color output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"NO_COLOR=1 ./my-program\n"})}),"\n",(0,i.jsx)(n.h3,{id:"colorterm",children:"COLORTERM"}),"\n",(0,i.jsx)(n.p,{children:"Indicates truecolor support:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"truecolor"})," or ",(0,i.jsx)(n.code,{children:"24bit"}),": Full RGB support"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"COLORTERM=truecolor ./my-program\n"})}),"\n",(0,i.jsx)(n.h3,{id:"term",children:"TERM"}),"\n",(0,i.jsx)(n.p,{children:"Terminal type detection:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Contains ",(0,i.jsx)(n.code,{children:"256color"}),": 256 color support"]}),"\n",(0,i.jsxs)(n.li,{children:["Contains ",(0,i.jsx)(n.code,{children:"truecolor"}),": RGB support"]}),"\n",(0,i.jsxs)(n.li,{children:["Equals ",(0,i.jsx)(n.code,{children:"dumb"}),": No color support"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"platform-specific-behavior",children:"Platform-Specific Behavior"}),"\n",(0,i.jsx)(n.h3,{id:"windows",children:"Windows"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"// Automatically handled by zig-colors\nif (builtin.os.tag == .windows) {\n    // Windows 10+ supports ANSI by default\n    // Older versions may need special handling\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"unix-like-systems",children:"Unix-like Systems"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"// TTY detection\nif (!std.io.getStdOut().isTty()) {\n    // Output is piped or redirected\n    colors.setEnabled(false);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"custom-detection",children:"Custom Detection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'pub fn customColorDetection() void {\n    const allocator = std.heap.page_allocator;\n\n    // Check custom environment variable\n    if (std.process.getEnvVarOwned(allocator, "MY_APP_COLORS")) |value| {\n        defer allocator.free(value);\n\n        if (std.mem.eql(u8, value, "none")) {\n            colors.setLevel(.none);\n        } else if (std.mem.eql(u8, value, "basic")) {\n            colors.setLevel(.basic);\n        } else if (std.mem.eql(u8, value, "full")) {\n            colors.setLevel(.truecolor);\n        }\n    } else |_| {\n        // Use default detection\n        colors.init();\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-struct",children:"Configuration Struct"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"const ColorConfig = struct {\n    enabled: bool = true,\n    level: colors.Level = .basic,\n    respect_no_color: bool = true,\n    force_color: bool = false,\n\n    pub fn apply(self: ColorConfig) void {\n        if (self.force_color) {\n            colors.setEnabled(true);\n            colors.setLevel(self.level);\n        } else if (self.respect_no_color) {\n            colors.init();  // Respects NO_COLOR\n            if (self.enabled) {\n                colors.setLevel(@min(colors.getLevel(), self.level));\n            } else {\n                colors.setEnabled(false);\n            }\n        } else {\n            colors.setEnabled(self.enabled);\n            if (self.enabled) {\n                colors.setLevel(self.level);\n            }\n        }\n    }\n};\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,i.jsx)(n.h3,{id:"pre-compute-styles",children:"Pre-compute Styles"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'// Instead of creating styles repeatedly\nfor (items) |item| {\n    std.debug.print("{}\\n", .{colors.red.bold().call(item)});\n}\n\n// Pre-compute once\nconst style = colors.red.bold();\nfor (items) |item| {\n    std.debug.print("{}\\n", .{style.call(item)});\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"conditional-styling",children:"Conditional Styling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'// Check once, not in loops\nconst use_color = colors.isSupported();\nconst error_style = if (use_color) colors.red.bold() else colors.Style{};\n\nfor (errors) |err| {\n    std.debug.print("{}\\n", .{error_style.call(err)});\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"batch-operations",children:"Batch Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'// Buffer output for better performance\nvar buf: [4096]u8 = undefined;\nvar stream = std.io.fixedBufferStream(&buf);\nconst writer = stream.writer();\n\n// Write styled content to buffer\ntry writer.print("{}", .{colors.green.call("Success")});\ntry writer.print(" - ", .{});\ntry writer.print("{}", .{colors.dim.call("Operation complete")});\n\n// Single write to stdout\ntry std.io.getStdOut().writeAll(stream.getWritten());\n'})}),"\n",(0,i.jsx)(n.h2,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(n.h3,{id:"testing-with-colors",children:"Testing with Colors"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'test "color output" {\n    // Save current state\n    const original_level = colors.getLevel();\n    defer colors.setLevel(original_level);\n\n    // Test with colors disabled\n    colors.setLevel(.none);\n    // ... test plain output ...\n\n    // Test with basic colors\n    colors.setLevel(.basic);\n    // ... test basic color output ...\n\n    // Test with full colors\n    colors.setLevel(.truecolor);\n    // ... test RGB output ...\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"mock-terminal",children:"Mock Terminal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'test "terminal detection" {\n    // Test NO_COLOR environment\n    try std.testing.expect(colors.isSupported() == expected);\n\n    // Test different terminal types\n    colors.setLevel(.basic);\n    try std.testing.expect(colors.getLevel() == .basic);\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Colors not showing"}),": Check terminal support and environment variables"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Wrong colors"}),": Terminal may not support requested level"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Persistent styles"}),": Ensure ",(0,i.jsx)(n.code,{children:"deinit()"})," is called"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance issues"}),": Pre-compute styles, batch operations"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"debug-output",children:"Debug Output"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'pub fn debugColorSupport() void {\n    std.debug.print("Color Support Debug:\\n", .{});\n    std.debug.print("  Enabled: {}\\n", .{colors.isSupported()});\n    std.debug.print("  Level: {}\\n", .{colors.getLevel()});\n\n    const allocator = std.heap.page_allocator;\n    if (std.process.getEnvVarOwned(allocator, "TERM")) |term| {\n        defer allocator.free(term);\n        std.debug.print("  TERM: {s}\\n", .{term});\n    } else |_| {}\n\n    if (std.process.getEnvVarOwned(allocator, "COLORTERM")) |ct| {\n        defer allocator.free(ct);\n        std.debug.print("  COLORTERM: {s}\\n", .{ct});\n    } else |_| {}\n\n    if (std.process.getEnvVarOwned(allocator, "NO_COLOR")) |_| {\n        std.debug.print("  NO_COLOR: set\\n", .{});\n    } else |_| {}\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/zig-colors-docs/getting-started",children:"Getting Started"})," - Initial setup guide"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/zig-colors-docs/api/colors",children:"Colors API"})," - Color functions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/zig-colors-docs/api/styles",children:"Styles API"})," - Text formatting"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/zig-colors-docs/examples/basic-usage",children:"Examples"})," - Practical examples"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>o,x:()=>t});var s=l(6540);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);