"use strict";(self.webpackChunkzig_colors_docs=self.webpackChunkzig_colors_docs||[]).push([[493],{6771:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>t,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>d});const l=JSON.parse('{"id":"api/rgb-hex","title":"RGB & Hex Colors","description":"Documentation for custom color support using RGB values and hex color codes.","source":"@site/versioned_docs/version-0.1.0/api/rgb-hex.md","sourceDirName":"api","slug":"/api/rgb-hex","permalink":"/zig-colors-docs/api/rgb-hex","draft":false,"unlisted":false,"tags":[],"version":"0.1.0","sidebarPosition":4,"frontMatter":{"title":"RGB & Hex Colors","sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"Background Colors","permalink":"/zig-colors-docs/api/backgrounds"},"next":{"title":"Utilities","permalink":"/zig-colors-docs/api/utilities"}}');var s=r(4848),o=r(8453);const c={title:"RGB & Hex Colors",sidebar_position:4},t="RGB & Hex API Reference",i={},d=[{value:"RGB Struct",id:"rgb-struct",level:2},{value:"RGB Methods",id:"rgb-methods",level:2},{value:"Foreground RGB",id:"foreground-rgb",level:3},{value:"Background RGB",id:"background-rgb",level:3},{value:"Hex Methods",id:"hex-methods",level:2},{value:"Foreground Hex",id:"foreground-hex",level:3},{value:"Background Hex",id:"background-hex",level:3},{value:"Hex Parsing",id:"hex-parsing",level:2},{value:"parseHex Function",id:"parsehex-function",level:3},{value:"Terminal Support",id:"terminal-support",level:2},{value:"Color Level Detection",id:"color-level-detection",level:3},{value:"Terminal Compatibility",id:"terminal-compatibility",level:3},{value:"Color Palettes",id:"color-palettes",level:2},{value:"Material Design Colors",id:"material-design-colors",level:3},{value:"Tailwind CSS Colors",id:"tailwind-css-colors",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Gradient Effects",id:"gradient-effects",level:3},{value:"Color Interpolation",id:"color-interpolation",level:3},{value:"Theme System",id:"theme-system",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Fallback Colors",id:"1-fallback-colors",level:3},{value:"2. Color Contrast",id:"2-color-contrast",level:3},{value:"3. Accessibility",id:"3-accessibility",level:3},{value:"See Also",id:"see-also",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"rgb--hex-api-reference",children:"RGB & Hex API Reference"})}),"\n",(0,s.jsx)(n.p,{children:"Documentation for custom color support using RGB values and hex color codes."}),"\n",(0,s.jsx)(n.h2,{id:"rgb-struct",children:"RGB Struct"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"pub const RGB = struct {\n    r: u8,\n    g: u8,\n    b: u8,\n};\n"})}),"\n",(0,s.jsx)(n.p,{children:"Represents an RGB color with red, green, and blue components (0-255)."}),"\n",(0,s.jsx)(n.h2,{id:"rgb-methods",children:"RGB Methods"}),"\n",(0,s.jsx)(n.h3,{id:"foreground-rgb",children:"Foreground RGB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"pub fn rgb(self: Style, r: u8, g: u8, b: u8) Style\n"})}),"\n",(0,s.jsx)(n.p,{children:"Sets a custom RGB foreground color."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"r"}),": Red component (0-255)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"g"}),": Green component (0-255)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"b"}),": Blue component (0-255)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," New ",(0,s.jsx)(n.code,{children:"Style"})," with RGB foreground color"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const style = colors.Style{};\nstd.debug.print("{}\\n", .{style.rgb(255, 107, 107).call("Coral red")});\nstd.debug.print("{}\\n", .{style.rgb(110, 235, 131).call("Mint green")});\nstd.debug.print("{}\\n", .{style.rgb(121, 134, 255).call("Periwinkle blue")});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"background-rgb",children:"Background RGB"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"pub fn bgRgb(self: Style, r: u8, g: u8, b: u8) Style\n"})}),"\n",(0,s.jsx)(n.p,{children:"Sets a custom RGB background color."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"r"}),": Red component (0-255)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"g"}),": Green component (0-255)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"b"}),": Blue component (0-255)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," New ",(0,s.jsx)(n.code,{children:"Style"})," with RGB background color"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'std.debug.print("{}\\n", .{colors.white.bgRgb(52, 73, 94).call("White on dark blue")});\nstd.debug.print("{}\\n", .{colors.black.bgRgb(241, 196, 15).call("Black on sunflower")});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"hex-methods",children:"Hex Methods"}),"\n",(0,s.jsx)(n.h3,{id:"foreground-hex",children:"Foreground Hex"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"pub fn hex(self: Style, hex_str: []const u8) Style\n"})}),"\n",(0,s.jsx)(n.p,{children:"Sets a foreground color using hex notation."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"hex_str"}),': Hex color string (e.g., "#FF6B6B" or "FF6B6B")']}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," New ",(0,s.jsx)(n.code,{children:"Style"})," with hex foreground color"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const style = colors.Style{};\nstd.debug.print("{}\\n", .{style.hex("#FF6B6B").call("Soft red")});\nstd.debug.print("{}\\n", .{style.hex("#4ECDC4").call("Turquoise")});\nstd.debug.print("{}\\n", .{style.hex("45B7D1").call("Sky blue (no #)")});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"background-hex",children:"Background Hex"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"pub fn bgHex(self: Style, hex_str: []const u8) Style\n"})}),"\n",(0,s.jsx)(n.p,{children:"Sets a background color using hex notation."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"hex_str"}),': Hex color string (e.g., "#FF6B6B" or "FF6B6B")']}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Returns:"})," New ",(0,s.jsx)(n.code,{children:"Style"})," with hex background color"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'std.debug.print("{}\\n", .{colors.white.bgHex("#2C3E50").call("White on midnight")});\nstd.debug.print("{}\\n", .{colors.black.bgHex("#F1C40F").call("Black on sunflower")});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"hex-parsing",children:"Hex Parsing"}),"\n",(0,s.jsx)(n.h3,{id:"parsehex-function",children:"parseHex Function"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"fn parseHex(hex: []const u8) !RGB\n"})}),"\n",(0,s.jsx)(n.p,{children:"Internal function that parses hex strings to RGB values."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Supported formats:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"#RRGGBB"'})," - With hash prefix"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"RRGGBB"'})," - Without hash prefix"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Error:"})," Returns ",(0,s.jsx)(n.code,{children:"error.InvalidHexColor"})," if the format is invalid"]}),"\n",(0,s.jsx)(n.h2,{id:"terminal-support",children:"Terminal Support"}),"\n",(0,s.jsx)(n.h3,{id:"color-level-detection",children:"Color Level Detection"}),"\n",(0,s.jsx)(n.p,{children:"RGB/Hex colors require truecolor terminal support:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const level = colors.getLevel();\nif (level == .truecolor) {\n    // Full RGB support available\n    std.debug.print("{}\\n", .{colors.Style{}.hex("#FF6B6B").call("Truecolor!")});\n} else {\n    // Fallback to basic colors\n    std.debug.print("{}\\n", .{colors.red.call("Basic color")});\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"terminal-compatibility",children:"Terminal Compatibility"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Terminal"}),(0,s.jsx)(n.th,{children:"RGB/Hex Support"}),(0,s.jsx)(n.th,{children:"Notes"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Windows Terminal"}),(0,s.jsx)(n.td,{children:"\u2713"}),(0,s.jsx)(n.td,{children:"Full 24-bit color"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"iTerm2"}),(0,s.jsx)(n.td,{children:"\u2713"}),(0,s.jsx)(n.td,{children:"Full 24-bit color"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"VS Code Terminal"}),(0,s.jsx)(n.td,{children:"\u2713"}),(0,s.jsx)(n.td,{children:"Full 24-bit color"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"GNOME Terminal"}),(0,s.jsx)(n.td,{children:"\u2713"}),(0,s.jsx)(n.td,{children:"Full 24-bit color"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"macOS Terminal"}),(0,s.jsx)(n.td,{children:"\u2717"}),(0,s.jsx)(n.td,{children:"256 colors only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"PuTTY"}),(0,s.jsx)(n.td,{children:"\u2717"}),(0,s.jsx)(n.td,{children:"256 colors only"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"color-palettes",children:"Color Palettes"}),"\n",(0,s.jsx)(n.h3,{id:"material-design-colors",children:"Material Design Colors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const Material = struct {\n    // Primary colors\n    const red = colors.Style{}.hex("#F44336");\n    const pink = colors.Style{}.hex("#E91E63");\n    const purple = colors.Style{}.hex("#9C27B0");\n    const deep_purple = colors.Style{}.hex("#673AB7");\n    const indigo = colors.Style{}.hex("#3F51B5");\n    const blue = colors.Style{}.hex("#2196F3");\n    const light_blue = colors.Style{}.hex("#03A9F4");\n    const cyan = colors.Style{}.hex("#00BCD4");\n    const teal = colors.Style{}.hex("#009688");\n    const green = colors.Style{}.hex("#4CAF50");\n    const light_green = colors.Style{}.hex("#8BC34A");\n    const lime = colors.Style{}.hex("#CDDC39");\n    const yellow = colors.Style{}.hex("#FFEB3B");\n    const amber = colors.Style{}.hex("#FFC107");\n    const orange = colors.Style{}.hex("#FF9800");\n    const deep_orange = colors.Style{}.hex("#FF5722");\n};\n'})}),"\n",(0,s.jsx)(n.h3,{id:"tailwind-css-colors",children:"Tailwind CSS Colors"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const Tailwind = struct {\n    // Modern palette\n    const slate = colors.Style{}.hex("#64748B");\n    const gray = colors.Style{}.hex("#6B7280");\n    const zinc = colors.Style{}.hex("#71717A");\n    const neutral = colors.Style{}.hex("#737373");\n    const stone = colors.Style{}.hex("#78716C");\n    const red = colors.Style{}.hex("#EF4444");\n    const orange = colors.Style{}.hex("#F97316");\n    const amber = colors.Style{}.hex("#F59E0B");\n    const yellow = colors.Style{}.hex("#EAB308");\n    const lime = colors.Style{}.hex("#84CC16");\n    const green = colors.Style{}.hex("#22C55E");\n    const emerald = colors.Style{}.hex("#10B981");\n    const teal = colors.Style{}.hex("#14B8A6");\n    const cyan = colors.Style{}.hex("#06B6D4");\n    const sky = colors.Style{}.hex("#0EA5E9");\n    const blue = colors.Style{}.hex("#3B82F6");\n    const indigo = colors.Style{}.hex("#6366F1");\n    const violet = colors.Style{}.hex("#8B5CF6");\n    const purple = colors.Style{}.hex("#A855F7");\n    const fuchsia = colors.Style{}.hex("#D946EF");\n    const pink = colors.Style{}.hex("#EC4899");\n    const rose = colors.Style{}.hex("#F43F5E");\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,s.jsx)(n.h3,{id:"gradient-effects",children:"Gradient Effects"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'pub fn gradient(text: []const u8, start: RGB, end: RGB) void {\n    const style = colors.Style{};\n    const len = text.len;\n\n    for (text, 0..) |char, i| {\n        const t = @as(f32, @floatFromInt(i)) / @as(f32, @floatFromInt(len - 1));\n\n        const r = @as(u8, @intFromFloat(@as(f32, start.r) * (1 - t) + @as(f32, end.r) * t));\n        const g = @as(u8, @intFromFloat(@as(f32, start.g) * (1 - t) + @as(f32, end.g) * t));\n        const b = @as(u8, @intFromFloat(@as(f32, start.b) * (1 - t) + @as(f32, end.b) * t));\n\n        std.debug.print("{}", .{style.rgb(r, g, b).call(&[_]u8{char})});\n    }\n}\n\n// Usage\ngradient("Rainbow Text", RGB{ .r = 255, .g = 0, .b = 0 }, RGB{ .r = 0, .g = 0, .b = 255 });\n'})}),"\n",(0,s.jsx)(n.h3,{id:"color-interpolation",children:"Color Interpolation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"pub fn interpolateColor(c1: RGB, c2: RGB, t: f32) RGB {\n    return RGB{\n        .r = @intFromFloat(@as(f32, c1.r) * (1 - t) + @as(f32, c2.r) * t),\n        .g = @intFromFloat(@as(f32, c1.g) * (1 - t) + @as(f32, c2.g) * t),\n        .b = @intFromFloat(@as(f32, c1.b) * (1 - t) + @as(f32, c2.b) * t),\n    };\n}\n\n// Create a color scale\npub fn temperatureColor(value: f32) RGB {\n    // 0.0 = cold (blue), 1.0 = hot (red)\n    const cold = RGB{ .r = 59, .g = 130, .b = 246 };  // Blue\n    const warm = RGB{ .r = 251, .g = 191, .b = 36 };  // Amber\n    const hot = RGB{ .r = 239, .g = 68, .b = 68 };    // Red\n\n    if (value < 0.5) {\n        return interpolateColor(cold, warm, value * 2);\n    } else {\n        return interpolateColor(warm, hot, (value - 0.5) * 2);\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"theme-system",children:"Theme System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'pub const Theme = struct {\n    primary: RGB,\n    secondary: RGB,\n    success: RGB,\n    warning: RGB,\n    error: RGB,\n    info: RGB,\n\n    pub const dark = Theme{\n        .primary = .{ .r = 139, .g = 92, .b = 246 },    // Violet\n        .secondary = .{ .r = 236, .g = 72, .b = 153 },  // Pink\n        .success = .{ .r = 34, .g = 197, .b = 94 },     // Green\n        .warning = .{ .r = 250, .g = 204, .b = 21 },    // Yellow\n        .error = .{ .r = 239, .g = 68, .b = 68 },       // Red\n        .info = .{ .r = 59, .g = 130, .b = 246 },       // Blue\n    };\n\n    pub const light = Theme{\n        .primary = .{ .r = 79, .g = 70, .b = 229 },     // Indigo\n        .secondary = .{ .r = 217, .g = 70, .b = 239 },  // Fuchsia\n        .success = .{ .r = 16, .g = 185, .b = 129 },    // Emerald\n        .warning = .{ .r = 245, .g = 158, .b = 11 },    // Amber\n        .error = .{ .r = 220, .g = 38, .b = 38 },       // Red\n        .info = .{ .r = 14, .g = 165, .b = 233 },       // Sky\n    };\n\n    pub fn apply(self: Theme) struct {\n        primary: colors.Style,\n        secondary: colors.Style,\n        success: colors.Style,\n        warning: colors.Style,\n        error: colors.Style,\n        info: colors.Style,\n    } {\n        const style = colors.Style{};\n        return .{\n            .primary = style.rgb(self.primary.r, self.primary.g, self.primary.b),\n            .secondary = style.rgb(self.secondary.r, self.secondary.g, self.secondary.b),\n            .success = style.rgb(self.success.r, self.success.g, self.success.b),\n            .warning = style.rgb(self.warning.r, self.warning.g, self.warning.b),\n            .error = style.rgb(self.error.r, self.error.g, self.error.b),\n            .info = style.rgb(self.info.r, self.info.g, self.info.b),\n        };\n    }\n};\n\n// Usage\nconst theme = Theme.dark.apply();\nstd.debug.print("{}\\n", .{theme.error.bold().call("Error: File not found")});\nstd.debug.print("{}\\n", .{theme.success.call("\u2713 Build completed")});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-fallback-colors",children:"1. Fallback Colors"}),"\n",(0,s.jsx)(n.p,{children:"Always provide fallbacks for environments without truecolor:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'pub fn smartColor(hex: []const u8, fallback: Color) colors.Style {\n    if (colors.getLevel() == .truecolor) {\n        return colors.Style{}.hex(hex);\n    } else {\n        return colors.Style{ .fg = fallback };\n    }\n}\n\n// Usage\nconst brand = smartColor("#FF6B6B", .red);\nstd.debug.print("{}\\n", .{brand.call("Brand color with fallback")});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"2-color-contrast",children:"2. Color Contrast"}),"\n",(0,s.jsx)(n.p,{children:"Ensure sufficient contrast for readability:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"pub fn contrastRatio(c1: RGB, c2: RGB) f32 {\n    const lum1 = luminance(c1);\n    const lum2 = luminance(c2);\n    const lighter = @max(lum1, lum2);\n    const darker = @min(lum1, lum2);\n    return (lighter + 0.05) / (darker + 0.05);\n}\n\nfn luminance(c: RGB) f32 {\n    const r = gammaExpand(@as(f32, @floatFromInt(c.r)) / 255.0);\n    const g = gammaExpand(@as(f32, @floatFromInt(c.g)) / 255.0);\n    const b = gammaExpand(@as(f32, @floatFromInt(c.b)) / 255.0);\n    return 0.2126 * r + 0.7152 * g + 0.0722 * b;\n}\n\nfn gammaExpand(n: f32) f32 {\n    return if (n <= 0.03928) n / 12.92 else std.math.pow(f32, (n + 0.055) / 1.055, 2.4);\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-accessibility",children:"3. Accessibility"}),"\n",(0,s.jsx)(n.p,{children:"Consider color blindness when choosing colors:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'// Color-blind friendly palette\nconst Accessible = struct {\n    const blue = colors.Style{}.hex("#0173B2");\n    const orange = colors.Style{}.hex("#DE8F05");\n    const green = colors.Style{}.hex("#029E73");\n    const yellow = colors.Style{}.hex("#CC78BC");\n    const red = colors.Style{}.hex("#CA0020");\n    const purple = colors.Style{}.hex("#7B3294");\n    const grey = colors.Style{}.hex("#949494");\n};\n'})}),"\n",(0,s.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/zig-colors-docs/api/colors",children:"Colors API"})," - Basic color functionality"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/zig-colors-docs/api/backgrounds",children:"Backgrounds API"})," - Background color methods"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/zig-colors-docs/api/styles",children:"Styles API"})," - Text formatting options"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/zig-colors-docs/api/utilities",children:"Utilities API"})," - Helper functions and detection"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>t});var l=r(6540);const s={},o=l.createContext(s);function c(e){const n=l.useContext(o);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),l.createElement(o.Provider,{value:n},e.children)}}}]);