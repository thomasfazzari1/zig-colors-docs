"use strict";(self.webpackChunkzig_colors_docs=self.webpackChunkzig_colors_docs||[]).push([[175],{6721:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"getting-started","title":"Getting Started","description":"This guide will help you integrate zig-colors into your project and start styling your terminal output.","source":"@site/versioned_docs/version-0.1.0/getting-started.md","sourceDirName":".","slug":"/getting-started","permalink":"/zig-colors-docs/getting-started","draft":false,"unlisted":false,"tags":[],"version":"0.1.0","sidebarPosition":2,"frontMatter":{"title":"Getting Started","sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Introduction","permalink":"/zig-colors-docs/"},"next":{"title":"Colors","permalink":"/zig-colors-docs/api/colors"}}');var i=o(4848),s=o(8453);const r={title:"Getting Started",sidebar_position:2},t="Getting Started",d={},c=[{value:"Installation",id:"installation",level:2},{value:"Step 1: Add to build.zig.zon",id:"step-1-add-to-buildzigzon",level:3},{value:"Step 2: Configure build.zig",id:"step-2-configure-buildzig",level:3},{value:"Step 3: Import and Initialize",id:"step-3-import-and-initialize",level:3},{value:"First Steps",id:"first-steps",level:2},{value:"Basic Colors",id:"basic-colors",level:3},{value:"Adding Styles",id:"adding-styles",level:3},{value:"Combining Styles",id:"combining-styles",level:3},{value:"Background Colors",id:"background-colors",level:3},{value:"Checking Color Support",id:"checking-color-support",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Manual Configuration",id:"manual-configuration",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Next Steps",id:"next-steps",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"getting-started",children:"Getting Started"})}),"\n",(0,i.jsx)(n.p,{children:"This guide will help you integrate zig-colors into your project and start styling your terminal output."}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.h3,{id:"step-1-add-to-buildzigzon",children:"Step 1: Add to build.zig.zon"}),"\n",(0,i.jsxs)(n.p,{children:["Add zig-colors as a dependency in your ",(0,i.jsx)(n.code,{children:"build.zig.zon"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'.{\n    .name = "my-project",\n    .version = "0.1.0",\n    .dependencies = .{\n        .@"zig-colors" = .{\n            .url = "https://github.com/thomasfazzari1/zig-colors/archive/refs/tags/v0.1.0.tar.gz",\n            .hash = "1220331bffdeca5488ee0a3a73f9c274f9856b63006d22b7fa2b810eb8a3fb9db867",\n        },\n    },\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-2-configure-buildzig",children:"Step 2: Configure build.zig"}),"\n",(0,i.jsxs)(n.p,{children:["In your ",(0,i.jsx)(n.code,{children:"build.zig"}),", add the module import:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'const std = @import("std");\n\npub fn build(b: *std.Build) void {\n    const target = b.standardTargetOptions(.{});\n    const optimize = b.standardOptimizeOption(.{});\n\n    const exe = b.addExecutable(.{\n        .name = "my-project",\n        .root_source_file = b.path("src/main.zig"),\n        .target = target,\n        .optimize = optimize,\n    });\n\n    // Add zig-colors dependency\n    const colors_dep = b.dependency("zig-colors", .{});\n    exe.root_module.addImport("zig-colors", colors_dep.module("zig-colors"));\n\n    b.installArtifact(exe);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"step-3-import-and-initialize",children:"Step 3: Import and Initialize"}),"\n",(0,i.jsx)(n.p,{children:"In your Zig source file:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'const std = @import("std");\nconst colors = @import("zig-colors");\n\npub fn main() !void {\n    // Initialize color support detection\n    colors.init();\n    defer colors.deinit();\n\n    // Your colorful code here!\n    std.debug.print("{}\\n", .{colors.green.call("Hello, colorful world!")});\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"first-steps",children:"First Steps"}),"\n",(0,i.jsx)(n.h3,{id:"basic-colors",children:"Basic Colors"}),"\n",(0,i.jsx)(n.p,{children:"Start with simple foreground colors:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'std.debug.print("{}\\n", .{colors.red.call("Error message")});\nstd.debug.print("{}\\n", .{colors.green.call("Success message")});\nstd.debug.print("{}\\n", .{colors.yellow.call("Warning message")});\nstd.debug.print("{}\\n", .{colors.blue.call("Info message")});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"adding-styles",children:"Adding Styles"}),"\n",(0,i.jsx)(n.p,{children:"Make your text stand out with text styles:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'std.debug.print("{}\\n", .{colors.bold.call("Bold text")});\nstd.debug.print("{}\\n", .{colors.italic.call("Italic text")});\nstd.debug.print("{}\\n", .{colors.underline.call("Underlined text")});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"combining-styles",children:"Combining Styles"}),"\n",(0,i.jsx)(n.p,{children:"Chain methods for complex styling:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'std.debug.print("{}\\n", .{colors.red.bold().call("Bold red error!")});\nstd.debug.print("{}\\n", .{colors.green.underline().call("Underlined success")});\nstd.debug.print("{}\\n", .{colors.yellow.dim().italic().call("Subtle warning")});\n'})}),"\n",(0,i.jsx)(n.h3,{id:"background-colors",children:"Background Colors"}),"\n",(0,i.jsx)(n.p,{children:"Add background colors for emphasis:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'std.debug.print("{}\\n", .{colors.white.bgRed().call("Alert!")});\nstd.debug.print("{}\\n", .{colors.black.bgYellow().call("Warning!")});\nstd.debug.print("{}\\n", .{colors.white.bgGreen().call("Success!")});\n'})}),"\n",(0,i.jsx)(n.h2,{id:"checking-color-support",children:"Checking Color Support"}),"\n",(0,i.jsx)(n.p,{children:"Always check if colors are supported:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:'if (colors.isSupported()) {\n    std.debug.print("{}\\n", .{colors.green.call("\u2713 Colors are supported!")});\n} else {\n    std.debug.print("Colors not supported\\n", .{});\n}\n\n// Check specific color level\nconst level = colors.getLevel();\nswitch (level) {\n    .none => std.debug.print("No color support\\n", .{}),\n    .basic => std.debug.print("Basic 16 colors\\n", .{}),\n    .ansi256 => std.debug.print("256 colors supported\\n", .{}),\n    .truecolor => std.debug.print("Full RGB support!\\n", .{}),\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.h3,{id:"manual-configuration",children:"Manual Configuration"}),"\n",(0,i.jsx)(n.p,{children:"You can manually control color output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-zig",children:"// Disable colors (useful for CI/CD or file output)\ncolors.setEnabled(false);\n\n// Force a specific color level\ncolors.setLevel(.basic);  // Force 16-color mode\ncolors.setLevel(.truecolor);  // Force RGB mode\n"})}),"\n",(0,i.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsx)(n.p,{children:"zig-colors respects standard environment variables:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"NO_COLOR"}),": Disables all color output when set"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"COLORTERM"}),": Set to ",(0,i.jsx)(n.code,{children:"truecolor"})," or ",(0,i.jsx)(n.code,{children:"24bit"})," for RGB support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TERM"}),": Detected automatically (e.g., ",(0,i.jsx)(n.code,{children:"xterm-256color"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you have zig-colors set up:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Explore ",(0,i.jsx)(n.a,{href:"/zig-colors-docs/examples/basic-usage",children:"Basic Usage"})," for more examples"]}),"\n",(0,i.jsxs)(n.li,{children:["Learn about ",(0,i.jsx)(n.a,{href:"/zig-colors-docs/examples/advanced-styling",children:"Advanced Styling"})," techniques"]}),"\n",(0,i.jsxs)(n.li,{children:["Check the ",(0,i.jsx)(n.a,{href:"/zig-colors-docs/api/colors",children:"API Reference"})," for all available methods"]}),"\n",(0,i.jsxs)(n.li,{children:["See ",(0,i.jsx)(n.a,{href:"/zig-colors-docs/examples/real-world",children:"Real World Examples"})," for practical applications"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>t});var l=o(6540);const i={},s=l.createContext(i);function r(e){const n=l.useContext(s);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);