"use strict";(self.webpackChunkzig_colors_docs=self.webpackChunkzig_colors_docs||[]).push([[398],{6759:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"examples/basic-usage","title":"Basic Usage","description":"This guide covers the fundamental features of zig-colors with practical examples.","source":"@site/docs/examples/basic-usage.md","sourceDirName":"examples","slug":"/examples/basic-usage","permalink":"/zig-colors-docs/next/examples/basic-usage","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Basic Usage","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Utilities","permalink":"/zig-colors-docs/next/api/utilities"},"next":{"title":"Advanced Styling","permalink":"/zig-colors-docs/next/examples/advanced-styling"}}');var r=l(4848),t=l(8453);const o={title:"Basic Usage",sidebar_position:1},i="Basic Usage",c={},a=[{value:"Simple Colors",id:"simple-colors",level:2},{value:"Foreground Colors",id:"foreground-colors",level:3},{value:"Text Styles",id:"text-styles",level:3},{value:"Combining Styles",id:"combining-styles",level:2},{value:"Color + Style",id:"color--style",level:3},{value:"Building Complex Styles",id:"building-complex-styles",level:3},{value:"Background Colors",id:"background-colors",level:2},{value:"Simple Backgrounds",id:"simple-backgrounds",level:3},{value:"Using the bg Namespace",id:"using-the-bg-namespace",level:3},{value:"Practical Examples",id:"practical-examples",level:2},{value:"Status Messages",id:"status-messages",level:3},{value:"Progress Indicators",id:"progress-indicators",level:3},{value:"Table Headers",id:"table-headers",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Check Color Support",id:"1-check-color-support",level:3},{value:"2. Create Semantic Styles",id:"2-create-semantic-styles",level:3},{value:"3. Provide Fallbacks",id:"3-provide-fallbacks",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"basic-usage",children:"Basic Usage"})}),"\n",(0,r.jsx)(n.p,{children:"This guide covers the fundamental features of zig-colors with practical examples."}),"\n",(0,r.jsx)(n.h2,{id:"simple-colors",children:"Simple Colors"}),"\n",(0,r.jsx)(n.h3,{id:"foreground-colors",children:"Foreground Colors"}),"\n",(0,r.jsx)(n.p,{children:"All 16 standard terminal colors are available:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'// Basic colors\nstd.debug.print("{}\\n", .{colors.black.call("Black text")});\nstd.debug.print("{}\\n", .{colors.red.call("Red text")});\nstd.debug.print("{}\\n", .{colors.green.call("Green text")});\nstd.debug.print("{}\\n", .{colors.yellow.call("Yellow text")});\nstd.debug.print("{}\\n", .{colors.blue.call("Blue text")});\nstd.debug.print("{}\\n", .{colors.magenta.call("Magenta text")});\nstd.debug.print("{}\\n", .{colors.cyan.call("Cyan text")});\nstd.debug.print("{}\\n", .{colors.white.call("White text")});\n\n// Bright variants\nstd.debug.print("{}\\n", .{colors.brightBlack.call("Bright black")});\nstd.debug.print("{}\\n", .{colors.brightRed.call("Bright red")});\nstd.debug.print("{}\\n", .{colors.brightGreen.call("Bright green")});\nstd.debug.print("{}\\n", .{colors.brightYellow.call("Bright yellow")});\nstd.debug.print("{}\\n", .{colors.brightBlue.call("Bright blue")});\nstd.debug.print("{}\\n", .{colors.brightMagenta.call("Bright magenta")});\nstd.debug.print("{}\\n", .{colors.brightCyan.call("Bright cyan")});\nstd.debug.print("{}\\n", .{colors.brightWhite.call("Bright white")});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"text-styles",children:"Text Styles"}),"\n",(0,r.jsx)(n.p,{children:"Apply formatting to make text stand out:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'std.debug.print("{}\\n", .{colors.bold.call("Bold text")});\nstd.debug.print("{}\\n", .{colors.dim.call("Dim text")});\nstd.debug.print("{}\\n", .{colors.italic.call("Italic text")});\nstd.debug.print("{}\\n", .{colors.underline.call("Underlined text")});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"combining-styles",children:"Combining Styles"}),"\n",(0,r.jsx)(n.h3,{id:"color--style",children:"Color + Style"}),"\n",(0,r.jsx)(n.p,{children:"Combine colors with text styles:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'// Color with bold\nstd.debug.print("{}\\n", .{colors.red.bold().call("Bold red error")});\n\n// Color with underline\nstd.debug.print("{}\\n", .{colors.green.underline().call("Underlined success")});\n\n// Color with italic\nstd.debug.print("{}\\n", .{colors.blue.italic().call("Italic info")});\n\n// Multiple styles\nstd.debug.print("{}\\n", .{colors.yellow.bold().underline().call("Important warning!")});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"building-complex-styles",children:"Building Complex Styles"}),"\n",(0,r.jsx)(n.p,{children:"Create reusable style combinations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'// Define style presets\nconst error_style = colors.red.bold();\nconst success_style = colors.green.bold();\nconst warning_style = colors.yellow.underline();\nconst info_style = colors.blue.italic();\n\n// Use them throughout your application\nstd.debug.print("{}\\n", .{error_style.call("Error: File not found")});\nstd.debug.print("{}\\n", .{success_style.call("Success: Operation completed")});\nstd.debug.print("{}\\n", .{warning_style.call("Warning: Deprecated function")});\nstd.debug.print("{}\\n", .{info_style.call("Info: Processing started")});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"background-colors",children:"Background Colors"}),"\n",(0,r.jsx)(n.h3,{id:"simple-backgrounds",children:"Simple Backgrounds"}),"\n",(0,r.jsx)(n.p,{children:"Apply background colors to text:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'// White text on colored backgrounds\nstd.debug.print("{}\\n", .{colors.white.bgRed().call("Red background")});\nstd.debug.print("{}\\n", .{colors.white.bgGreen().call("Green background")});\nstd.debug.print("{}\\n", .{colors.white.bgBlue().call("Blue background")});\n\n// Black text on light backgrounds\nstd.debug.print("{}\\n", .{colors.black.bgYellow().call("Yellow background")});\nstd.debug.print("{}\\n", .{colors.black.bgCyan().call("Cyan background")});\nstd.debug.print("{}\\n", .{colors.black.bgWhite().call("White background")});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"using-the-bg-namespace",children:"Using the bg Namespace"}),"\n",(0,r.jsx)(n.p,{children:"Alternative syntax for backgrounds:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'// Start with background color\nstd.debug.print("{}\\n", .{colors.bg.red().white().call("White on red")});\nstd.debug.print("{}\\n", .{colors.bg.blue().yellow().call("Yellow on blue")});\nstd.debug.print("{}\\n", .{colors.bg.green().black().bold().call("Bold black on green")});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"practical-examples",children:"Practical Examples"}),"\n",(0,r.jsx)(n.h3,{id:"status-messages",children:"Status Messages"}),"\n",(0,r.jsx)(n.p,{children:"Create consistent status indicators:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'pub fn printStatus(status: enum { error, success, warning, info }, message: []const u8) void {\n    const style = switch (status) {\n        .error => colors.red.bold(),\n        .success => colors.green.bold(),\n        .warning => colors.yellow.bold(),\n        .info => colors.blue.bold(),\n    };\n\n    const prefix = switch (status) {\n        .error => "\u2717 ERROR",\n        .success => "\u2713 SUCCESS",\n        .warning => "\u26a0 WARNING",\n        .info => "\u2139 INFO",\n    };\n\n    std.debug.print("{} {s}\\n", .{style.call(prefix), message});\n}\n\n// Usage\nprintStatus(.error, "Failed to connect to database");\nprintStatus(.success, "Build completed");\nprintStatus(.warning, "Using deprecated API");\nprintStatus(.info, "Starting server on port 8080");\n'})}),"\n",(0,r.jsx)(n.h3,{id:"progress-indicators",children:"Progress Indicators"}),"\n",(0,r.jsx)(n.p,{children:"Create colorful progress bars:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'pub fn printProgress(percent: u8) void {\n    const filled = @divFloor(percent, 5);\n    const empty = 20 - filled;\n\n    std.debug.print("[", .{});\n\n    // Filled portion\n    var i: u8 = 0;\n    while (i < filled) : (i += 1) {\n        const style = if (percent < 50) colors.red else if (percent < 80) colors.yellow else colors.green;\n        std.debug.print("{}", .{style.call("\u2588")});\n    }\n\n    // Empty portion\n    i = 0;\n    while (i < empty) : (i += 1) {\n        std.debug.print("{}", .{colors.dim.call("\u2591")});\n    }\n\n    std.debug.print("] {}%\\n", .{percent});\n}\n\n// Usage\nprintProgress(25);  // Red progress bar\nprintProgress(60);  // Yellow progress bar\nprintProgress(90);  // Green progress bar\n'})}),"\n",(0,r.jsx)(n.h3,{id:"table-headers",children:"Table Headers"}),"\n",(0,r.jsx)(n.p,{children:"Style table headers for better readability:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'pub fn printTableHeader(headers: []const []const u8) void {\n    for (headers, 0..) |header, i| {\n        if (i > 0) std.debug.print(" | ", .{});\n        std.debug.print("{}", .{colors.bold.underline().call(header)});\n    }\n    std.debug.print("\\n", .{});\n}\n\n// Usage\nprintTableHeader(&.{ "Name", "Status", "Time", "Memory" });\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-check-color-support",children:"1. Check Color Support"}),"\n",(0,r.jsx)(n.p,{children:"Always verify color support before using advanced features:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'if (colors.isSupported()) {\n    // Use colors\n    std.debug.print("{}\\n", .{colors.green.call("\u2713 Colored output")});\n} else {\n    // Fallback to plain text\n    std.debug.print("\u2713 Plain output\\n", .{});\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-create-semantic-styles",children:"2. Create Semantic Styles"}),"\n",(0,r.jsx)(n.p,{children:"Define meaningful style constants:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:"const Styles = struct {\n    const error = colors.red.bold();\n    const warning = colors.yellow;\n    const success = colors.green.bold();\n    const info = colors.blue;\n    const debug = colors.dim;\n    const highlight = colors.white.bgBlue().bold();\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-provide-fallbacks",children:"3. Provide Fallbacks"}),"\n",(0,r.jsx)(n.p,{children:"Consider users without color support:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'pub fn formatError(msg: []const u8) void {\n    if (colors.isSupported()) {\n        std.debug.print("{} {s}\\n", .{colors.red.bold().call("ERROR:"), msg});\n    } else {\n        std.debug.print("ERROR: {s}\\n", .{msg});\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Learn about ",(0,r.jsx)(n.a,{href:"/zig-colors-docs/next/examples/advanced-styling",children:"Advanced Styling"})," with RGB and custom colors"]}),"\n",(0,r.jsxs)(n.li,{children:["Explore ",(0,r.jsx)(n.a,{href:"/zig-colors-docs/next/examples/real-world",children:"Real World Examples"})," for complete applications"]}),"\n",(0,r.jsxs)(n.li,{children:["Check the ",(0,r.jsx)(n.a,{href:"/zig-colors-docs/next/api/colors",children:"API Reference"})," for all available methods"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>o,x:()=>i});var s=l(6540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);