"use strict";(self.webpackChunkzig_colors_docs=self.webpackChunkzig_colors_docs||[]).push([[548],{6501:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>g,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"examples/advanced-styling","title":"Advanced Styling","description":"This guide covers advanced features including RGB colors, custom palettes, and complex styling techniques.","source":"@site/versioned_docs/version-0.1.0/examples/advanced-styling.md","sourceDirName":"examples","slug":"/examples/advanced-styling","permalink":"/zig-colors-docs/examples/advanced-styling","draft":false,"unlisted":false,"tags":[],"version":"0.1.0","sidebarPosition":2,"frontMatter":{"title":"Advanced Styling","sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Basic Usage","permalink":"/zig-colors-docs/examples/basic-usage"},"next":{"title":"Real-World Examples","permalink":"/zig-colors-docs/examples/real-world"}}');var s=l(4848),o=l(8453);const r={title:"Advanced Styling",sidebar_position:2},i="Advanced Styling",a={},c=[{value:"RGB and Hex Colors",id:"rgb-and-hex-colors",level:2},{value:"RGB Colors",id:"rgb-colors",level:3},{value:"Hex Colors",id:"hex-colors",level:3},{value:"RGB Backgrounds",id:"rgb-backgrounds",level:3},{value:"Custom Color Palettes",id:"custom-color-palettes",level:2},{value:"Defining a Theme",id:"defining-a-theme",level:3},{value:"Gradient Effects",id:"gradient-effects",level:3},{value:"Complex Styling Patterns",id:"complex-styling-patterns",level:2},{value:"Status Badges",id:"status-badges",level:3},{value:"Syntax Highlighting",id:"syntax-highlighting",level:3},{value:"Box Drawing",id:"box-drawing",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Conditional Styling",id:"conditional-styling",level:3},{value:"Caching Styles",id:"caching-styles",level:3},{value:"Platform-Specific Features",id:"platform-specific-features",level:2},{value:"Windows Terminal",id:"windows-terminal",level:3},{value:"Terminal Capabilities",id:"terminal-capabilities",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"advanced-styling",children:"Advanced Styling"})}),"\n",(0,s.jsx)(n.p,{children:"This guide covers advanced features including RGB colors, custom palettes, and complex styling techniques."}),"\n",(0,s.jsx)(n.h2,{id:"rgb-and-hex-colors",children:"RGB and Hex Colors"}),"\n",(0,s.jsx)(n.h3,{id:"rgb-colors",children:"RGB Colors"}),"\n",(0,s.jsx)(n.p,{children:"Use exact RGB values for precise color control (requires truecolor terminal support):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const style = colors.Style{};\n\n// Using RGB values\nstd.debug.print("{}\\n", .{style.rgb(255, 107, 107).call("Coral red")});\nstd.debug.print("{}\\n", .{style.rgb(110, 235, 131).call("Mint green")});\nstd.debug.print("{}\\n", .{style.rgb(121, 134, 255).call("Periwinkle blue")});\n\n// RGB with styles\nstd.debug.print("{}\\n", .{style.rgb(255, 179, 71).bold().call("Bold orange")});\nstd.debug.print("{}\\n", .{style.rgb(155, 89, 182).italic().call("Italic purple")});\nstd.debug.print("{}\\n", .{style.rgb(46, 204, 113).underline().call("Underlined emerald")});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"hex-colors",children:"Hex Colors"}),"\n",(0,s.jsx)(n.p,{children:"Use familiar hex notation for colors:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const style = colors.Style{};\n\n// Basic hex colors\nstd.debug.print("{}\\n", .{style.hex("#FF6B6B").call("Soft red")});\nstd.debug.print("{}\\n", .{style.hex("#4ECDC4").call("Turquoise")});\nstd.debug.print("{}\\n", .{style.hex("#45B7D1").call("Sky blue")});\n\n// Popular color palettes\nstd.debug.print("{}\\n", .{style.hex("#E74C3C").call("Alizarin")});      // Flat UI Colors\nstd.debug.print("{}\\n", .{style.hex("#3498DB").call("Peter River")});   // Flat UI Colors\nstd.debug.print("{}\\n", .{style.hex("#2ECC71").call("Emerald")});       // Flat UI Colors\n\n// Material Design colors\nstd.debug.print("{}\\n", .{style.hex("#F44336").call("Material Red")});\nstd.debug.print("{}\\n", .{style.hex("#4CAF50").call("Material Green")});\nstd.debug.print("{}\\n", .{style.hex("#2196F3").call("Material Blue")});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"rgb-backgrounds",children:"RGB Backgrounds"}),"\n",(0,s.jsx)(n.p,{children:"Apply RGB colors to backgrounds:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const style = colors.Style{};\n\n// RGB backgrounds\nstd.debug.print("{}\\n", .{colors.white.bgRgb(52, 73, 94).call("White on dark blue-gray")});\nstd.debug.print("{}\\n", .{colors.black.bgRgb(241, 196, 15).call("Black on sunflower")});\nstd.debug.print("{}\\n", .{style.rgb(255, 255, 255).bgRgb(155, 89, 182).call("White on purple")});\n\n// Hex backgrounds\nstd.debug.print("{}\\n", .{colors.white.bgHex("#2C3E50").call("White on midnight blue")});\nstd.debug.print("{}\\n", .{colors.black.bgHex("#F1C40F").call("Black on sunflower")});\nstd.debug.print("{}\\n", .{style.hex("#FFFFFF").bgHex("#9B59B6").call("White on amethyst")});\n'})}),"\n",(0,s.jsx)(n.h2,{id:"custom-color-palettes",children:"Custom Color Palettes"}),"\n",(0,s.jsx)(n.h3,{id:"defining-a-theme",children:"Defining a Theme"}),"\n",(0,s.jsx)(n.p,{children:"Create consistent color themes for your application:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const Theme = struct {\n    // Primary colors\n    const primary = colors.Style{}.hex("#007AFF");        // iOS blue\n    const secondary = colors.Style{}.hex("#5856D6");      // iOS purple\n    const success = colors.Style{}.hex("#34C759");        // iOS green\n    const danger = colors.Style{}.hex("#FF3B30");         // iOS red\n    const warning = colors.Style{}.hex("#FF9500");        // iOS orange\n    const info = colors.Style{}.hex("#5AC8FA");           // iOS light blue\n\n    // Neutral colors\n    const text = colors.Style{}.hex("#000000");\n    const textLight = colors.Style{}.hex("#8E8E93");\n    const background = colors.Style{}.hex("#F2F2F7");\n\n    // Semantic styles\n    const h1 = primary.bold();\n    const h2 = secondary.bold();\n    const error = danger.bold();\n    const success_msg = success.bold();\n    const muted = textLight.dim();\n};\n\n// Usage\nstd.debug.print("{}\\n", .{Theme.h1.call("Main Title")});\nstd.debug.print("{}\\n", .{Theme.error.call("Error: Invalid input")});\nstd.debug.print("{}\\n", .{Theme.muted.call("Last updated 5 minutes ago")});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"gradient-effects",children:"Gradient Effects"}),"\n",(0,s.jsx)(n.p,{children:"Simulate gradients with RGB transitions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'pub fn printGradient(text: []const u8) void {\n    const style = colors.Style{};\n    const len = text.len;\n\n    for (text, 0..) |char, i| {\n        const progress = @as(f32, @floatFromInt(i)) / @as(f32, @floatFromInt(len));\n\n        // Gradient from blue to purple\n        const r = @as(u8, @intFromFloat(59 + (147 - 59) * progress));\n        const g = @as(u8, @intFromFloat(130 - 130 * progress));\n        const b = @as(u8, @intFromFloat(246 - (246 - 160) * progress));\n\n        std.debug.print("{}", .{style.rgb(r, g, b).call(&[_]u8{char})});\n    }\n    std.debug.print("\\n", .{});\n}\n\n// Usage\nprintGradient("Gradient Text Effect!");\n'})}),"\n",(0,s.jsx)(n.h2,{id:"complex-styling-patterns",children:"Complex Styling Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"status-badges",children:"Status Badges"}),"\n",(0,s.jsx)(n.p,{children:"Create GitHub-style status badges:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'pub fn printBadge(label: []const u8, value: []const u8, value_color: []const u8) void {\n    const style = colors.Style{};\n\n    // Label with dark gray background\n    std.debug.print("{}", .{\n        colors.white.bgRgb(85, 85, 85).call(label)\n    });\n\n    // Value with custom color background\n    std.debug.print("{}\\n", .{\n        style.hex("#FFFFFF").bgHex(value_color).bold().call(value)\n    });\n}\n\n// Usage\nprintBadge(" build ", " passing ", "#4CAF50");\nprintBadge(" coverage ", " 98% ", "#FFC107");\nprintBadge(" version ", " v2.1.0 ", "#2196F3");\n'})}),"\n",(0,s.jsx)(n.h3,{id:"syntax-highlighting",children:"Syntax Highlighting"}),"\n",(0,s.jsx)(n.p,{children:"Create a simple syntax highlighter:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'const SyntaxHighlight = struct {\n    const keyword = colors.Style{}.hex("#FF79C6").bold();      // Pink\n    const string = colors.Style{}.hex("#F1FA8C");              // Yellow\n    const number = colors.Style{}.hex("#BD93F9");              // Purple\n    const comment = colors.Style{}.hex("#6272A4").italic();    // Gray\n    const function = colors.Style{}.hex("#50FA7B");            // Green\n    const type_name = colors.Style{}.hex("#8BE9FD");           // Cyan\n};\n\npub fn highlightCode() void {\n    std.debug.print("{} ", .{SyntaxHighlight.keyword.call("const")});\n    std.debug.print("{} = ", .{SyntaxHighlight.function.call("allocator")});\n    std.debug.print("{};\\n", .{SyntaxHighlight.type_name.call("std.heap.page_allocator")});\n\n    std.debug.print("{} ", .{SyntaxHighlight.keyword.call("const")});\n    std.debug.print("result = ");\n    std.debug.print("{}", .{SyntaxHighlight.keyword.call("try")});\n    std.debug.print(" allocator.alloc(u8, ");\n    std.debug.print("{});\\n", .{SyntaxHighlight.number.call("1024")});\n\n    std.debug.print("{}\\n", .{SyntaxHighlight.comment.call("// Allocate 1KB of memory")});\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"box-drawing",children:"Box Drawing"}),"\n",(0,s.jsx)(n.p,{children:"Create colored boxes and borders:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'pub fn drawBox(title: []const u8, content: []const u8, box_color: colors.Style) void {\n    const width = 40;\n    const top_left = "\u256d";\n    const top_right = "\u256e";\n    const bottom_left = "\u2570";\n    const bottom_right = "\u256f";\n    const horizontal = "\u2500";\n    const vertical = "\u2502";\n\n    // Top border\n    std.debug.print("{}", .{box_color.call(top_left)});\n    std.debug.print("{}", .{box_color.call(horizontal)});\n    std.debug.print(" {} ", .{box_color.bold().call(title)});\n    var i: usize = title.len + 4;\n    while (i < width - 1) : (i += 1) {\n        std.debug.print("{}", .{box_color.call(horizontal)});\n    }\n    std.debug.print("{}\\n", .{box_color.call(top_right)});\n\n    // Content\n    std.debug.print("{} {s}", .{box_color.call(vertical), content});\n    i = content.len + 2;\n    while (i < width - 1) : (i += 1) {\n        std.debug.print(" ", .{});\n    }\n    std.debug.print("{}\\n", .{box_color.call(vertical)});\n\n    // Bottom border\n    std.debug.print("{}", .{box_color.call(bottom_left)});\n    i = 0;\n    while (i < width - 2) : (i += 1) {\n        std.debug.print("{}", .{box_color.call(horizontal)});\n    }\n    std.debug.print("{}\\n", .{box_color.call(bottom_right)});\n}\n\n// Usage\ndrawBox("Success", "Operation completed successfully!", colors.green);\ndrawBox("Warning", "This action cannot be undone", colors.yellow);\ndrawBox("Error", "Failed to connect to server", colors.red);\n'})}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"conditional-styling",children:"Conditional Styling"}),"\n",(0,s.jsx)(n.p,{children:"Only apply complex styles when supported:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'pub const SmartStyle = struct {\n    style: colors.Style,\n    fallback: colors.Style,\n\n    pub fn call(self: SmartStyle, text: []const u8) colors.StyledText {\n        const level = colors.getLevel();\n        if (level == .truecolor) {\n            return self.style.call(text);\n        } else {\n            return self.fallback.call(text);\n        }\n    }\n};\n\n// Define styles with fallbacks\nconst brand_color = SmartStyle{\n    .style = colors.Style{}.hex("#FF6B6B"),\n    .fallback = colors.red,\n};\n\n// Usage\nstd.debug.print("{}\\n", .{brand_color.call("Brand Text")});\n'})}),"\n",(0,s.jsx)(n.h3,{id:"caching-styles",children:"Caching Styles"}),"\n",(0,s.jsx)(n.p,{children:"Pre-compute styles for better performance:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"const CachedStyles = struct {\n    var cache: std.StringHashMap(colors.Style) = undefined;\n    var initialized = false;\n\n    pub fn init(allocator: std.mem.Allocator) void {\n        cache = std.StringHashMap(colors.Style).init(allocator);\n        initialized = true;\n    }\n\n    pub fn deinit() void {\n        if (initialized) {\n            cache.deinit();\n            initialized = false;\n        }\n    }\n\n    pub fn get(name: []const u8) ?colors.Style {\n        if (!initialized) return null;\n        return cache.get(name);\n    }\n\n    pub fn put(name: []const u8, style: colors.Style) !void {\n        if (!initialized) return error.NotInitialized;\n        try cache.put(name, style);\n    }\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"platform-specific-features",children:"Platform-Specific Features"}),"\n",(0,s.jsx)(n.h3,{id:"windows-terminal",children:"Windows Terminal"}),"\n",(0,s.jsx)(n.p,{children:"Take advantage of Windows Terminal features:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:'if (builtin.os.tag == .windows and colors.getLevel() == .truecolor) {\n    // Windows Terminal supports additional effects\n    const style = colors.Style{};\n\n    // Use Windows Terminal\'s extended color palette\n    std.debug.print("{}\\n", .{style.hex("#0078D4").call("Windows Blue")});\n    std.debug.print("{}\\n", .{style.hex("#107C10").call("Windows Green")});\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"terminal-capabilities",children:"Terminal Capabilities"}),"\n",(0,s.jsx)(n.p,{children:"Adapt to different terminal emulators:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-zig",children:"pub fn getBestStyle(preferred_hex: []const u8, fallback_256: u8, fallback_16: colors.Color) colors.Style {\n    const level = colors.getLevel();\n    return switch (level) {\n        .truecolor => colors.Style{}.hex(preferred_hex),\n        .ansi256 => colors.Style{}.ansi256(fallback_256),  // Note: This would need to be implemented\n        .basic => colors.Style{ .fg = fallback_16 },\n        .none => colors.Style{},\n    };\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Explore ",(0,s.jsx)(n.a,{href:"/zig-colors-docs/examples/real-world",children:"Real World Examples"})," for complete applications"]}),"\n",(0,s.jsxs)(n.li,{children:["Check the ",(0,s.jsx)(n.a,{href:"/zig-colors-docs/api/rgb-hex",children:"RGB & Hex Reference"})," for color specifications"]}),"\n",(0,s.jsxs)(n.li,{children:["Learn about ",(0,s.jsx)(n.a,{href:"/zig-colors-docs/api/backgrounds",children:"Background Styling"})," options"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>r,x:()=>i});var t=l(6540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);