"use strict";(self.webpackChunkzig_colors_docs=self.webpackChunkzig_colors_docs||[]).push([[584],{6433:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/colors","title":"Colors","description":"Documentation for basic color functionality in zig-colors.","source":"@site/docs/api/colors.md","sourceDirName":"api","slug":"/api/colors","permalink":"/zig-colors-docs/next/api/colors","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Colors","sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Getting Started","permalink":"/zig-colors-docs/next/getting-started"},"next":{"title":"Text Styles","permalink":"/zig-colors-docs/next/api/styles"}}');var o=l(4848),r=l(8453);const t={title:"Colors",sidebar_position:1},i="Colors API Reference",c={},d=[{value:"Color Enum",id:"color-enum",level:2},{value:"Pre-defined Color Styles",id:"pre-defined-color-styles",level:2},{value:"Basic Colors",id:"basic-colors",level:3},{value:"Bright Colors",id:"bright-colors",level:3},{value:"Style Methods",id:"style-methods",level:2},{value:"Foreground Colors",id:"foreground-colors",level:3},{value:"Chaining Colors",id:"chaining-colors",level:3},{value:"Color Support Detection",id:"color-support-detection",level:2},{value:"Level Enum",id:"level-enum",level:3},{value:"Detection Functions",id:"detection-functions",level:3},{value:"Examples",id:"examples",level:2},{value:"Semantic Color Usage",id:"semantic-color-usage",level:3},{value:"Conditional Coloring",id:"conditional-coloring",level:3},{value:"Color Palettes",id:"color-palettes",level:3},{value:"Platform Considerations",id:"platform-considerations",level:2},{value:"Windows",id:"windows",level:3},{value:"macOS",id:"macos",level:3},{value:"Linux",id:"linux",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"See Also",id:"see-also",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"colors-api-reference",children:"Colors API Reference"})}),"\n",(0,o.jsx)(n.p,{children:"Documentation for basic color functionality in zig-colors."}),"\n",(0,o.jsx)(n.h2,{id:"color-enum",children:"Color Enum"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"pub const Color = enum(u8) {\n    black = 30,\n    red = 31,\n    green = 32,\n    yellow = 33,\n    blue = 34,\n    magenta = 35,\n    cyan = 36,\n    white = 37,\n    default = 39,\n\n    // Bright variants\n    bright_black = 90,\n    bright_red = 91,\n    bright_green = 92,\n    bright_yellow = 93,\n    bright_blue = 94,\n    bright_magenta = 95,\n    bright_cyan = 96,\n    bright_white = 97,\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"pre-defined-color-styles",children:"Pre-defined Color Styles"}),"\n",(0,o.jsx)(n.h3,{id:"basic-colors",children:"Basic Colors"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"pub const black: Style\npub const red: Style\npub const green: Style\npub const yellow: Style\npub const blue: Style\npub const magenta: Style\npub const cyan: Style\npub const white: Style\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:'std.debug.print("{}\\n", .{colors.red.call("Error text")});\nstd.debug.print("{}\\n", .{colors.green.call("Success text")});\n'})}),"\n",(0,o.jsx)(n.h3,{id:"bright-colors",children:"Bright Colors"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"pub const brightBlack: Style\npub const brightRed: Style\npub const brightGreen: Style\npub const brightYellow: Style\npub const brightBlue: Style\npub const brightMagenta: Style\npub const brightCyan: Style\npub const brightWhite: Style\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:'std.debug.print("{}\\n", .{colors.brightRed.call("Bright error!")});\nstd.debug.print("{}\\n", .{colors.brightGreen.call("Bright success!")});\n'})}),"\n",(0,o.jsx)(n.h2,{id:"style-methods",children:"Style Methods"}),"\n",(0,o.jsx)(n.h3,{id:"foreground-colors",children:"Foreground Colors"}),"\n",(0,o.jsxs)(n.p,{children:["Each ",(0,o.jsx)(n.code,{children:"Style"})," instance provides methods to set foreground colors:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"pub fn black(self: Style) Style\npub fn red(self: Style) Style\npub fn green(self: Style) Style\npub fn yellow(self: Style) Style\npub fn blue(self: Style) Style\npub fn magenta(self: Style) Style\npub fn cyan(self: Style) Style\npub fn white(self: Style) Style\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Bright variants:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"pub fn brightBlack(self: Style) Style\npub fn brightRed(self: Style) Style\npub fn brightGreen(self: Style) Style\npub fn brightYellow(self: Style) Style\npub fn brightBlue(self: Style) Style\npub fn brightMagenta(self: Style) Style\npub fn brightCyan(self: Style) Style\npub fn brightWhite(self: Style) Style\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:'const style = colors.Style{};\nstd.debug.print("{}\\n", .{style.red().call("Red text")});\nstd.debug.print("{}\\n", .{style.brightBlue().call("Bright blue text")});\n'})}),"\n",(0,o.jsx)(n.h3,{id:"chaining-colors",children:"Chaining Colors"}),"\n",(0,o.jsx)(n.p,{children:"Colors can be chained with other styling methods:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:'// Combine with text styles\ncolors.red.bold().call("Bold red")\ncolors.green.italic().underline().call("Italic underlined green")\n\n// Override colors (last one wins)\ncolors.blue.red().call("This will be red")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"color-support-detection",children:"Color Support Detection"}),"\n",(0,o.jsx)(n.h3,{id:"level-enum",children:"Level Enum"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"pub const Level = enum(u2) {\n    none = 0,      // No colors\n    basic = 1,     // 16 colors\n    ansi256 = 2,   // 256 colors\n    truecolor = 3, // 16M colors (RGB)\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"detection-functions",children:"Detection Functions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:"pub fn getLevel() Level\n"})}),"\n",(0,o.jsx)(n.p,{children:"Returns the current color support level."}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:'const level = colors.getLevel();\nswitch (level) {\n    .none => std.debug.print("No color support\\n", .{}),\n    .basic => std.debug.print("16 colors available\\n", .{}),\n    .ansi256 => std.debug.print("256 colors available\\n", .{}),\n    .truecolor => std.debug.print("Full RGB support!\\n", .{}),\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.h3,{id:"semantic-color-usage",children:"Semantic Color Usage"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:'// Define semantic colors\nconst ColorScheme = struct {\n    const error = colors.red.bold();\n    const warning = colors.yellow;\n    const success = colors.green.bold();\n    const info = colors.blue;\n    const debug = colors.dim;\n};\n\n// Use them consistently\nstd.debug.print("{} {s}\\n", .{ColorScheme.error.call("ERROR:"), "File not found"});\nstd.debug.print("{} {s}\\n", .{ColorScheme.warning.call("WARN:"), "Deprecated API"});\nstd.debug.print("{} {s}\\n", .{ColorScheme.success.call("OK:"), "Build complete"});\n'})}),"\n",(0,o.jsx)(n.h3,{id:"conditional-coloring",children:"Conditional Coloring"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:'pub fn statusColor(value: f32) colors.Style {\n    if (value < 0.33) return colors.red;\n    if (value < 0.66) return colors.yellow;\n    return colors.green;\n}\n\n// Usage\nconst cpu_usage = 0.75;\nstd.debug.print("CPU: {}\\n", .{statusColor(cpu_usage).call("75%")});\n'})}),"\n",(0,o.jsx)(n.h3,{id:"color-palettes",children:"Color Palettes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-zig",children:'const Palette = struct {\n    // Monokai theme colors\n    const pink = colors.Style{}.hex("#F92672");\n    const green = colors.Style{}.hex("#A6E22E");\n    const yellow = colors.Style{}.hex("#F4BF75");\n    const blue = colors.Style{}.hex("#66D9EF");\n    const purple = colors.Style{}.hex("#AE81FF");\n    const white = colors.Style{}.hex("#F8F8F2");\n    const gray = colors.Style{}.hex("#75715E");\n};\n'})}),"\n",(0,o.jsx)(n.h2,{id:"platform-considerations",children:"Platform Considerations"}),"\n",(0,o.jsx)(n.h3,{id:"windows",children:"Windows"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Colors are supported on Windows 10+ by default"}),"\n",(0,o.jsx)(n.li,{children:"Older Windows versions may require enabling ANSI support"}),"\n",(0,o.jsx)(n.li,{children:"Windows Terminal provides full truecolor support"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"macos",children:"macOS"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Terminal.app supports 256 colors"}),"\n",(0,o.jsx)(n.li,{children:"iTerm2 supports truecolor"}),"\n",(0,o.jsx)(n.li,{children:"Color detection works automatically"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"linux",children:"Linux"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Most modern terminals support at least 256 colors"}),"\n",(0,o.jsxs)(n.li,{children:["Check ",(0,o.jsx)(n.code,{children:"$COLORTERM"})," for truecolor support"]}),"\n",(0,o.jsxs)(n.li,{children:["Respects ",(0,o.jsx)(n.code,{children:"$NO_COLOR"})," environment variable"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Use semantic names"}),": Instead of ",(0,o.jsx)(n.code,{children:"colors.red"}),", use meaningful names like ",(0,o.jsx)(n.code,{children:"error_color"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Check support"}),": Always verify color support for graceful degradation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Provide fallbacks"}),": Ensure your application works without colors"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Be consistent"}),": Use the same colors for the same types of information"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Consider accessibility"}),": Not everyone can distinguish all colors"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/zig-colors-docs/next/api/styles",children:"Styles API"})," - Text styling (bold, italic, etc.)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/zig-colors-docs/next/api/backgrounds",children:"Backgrounds API"})," - Background color methods"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/zig-colors-docs/next/api/rgb-hex",children:"RGB & Hex API"})," - Custom color support"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"/zig-colors-docs/next/api/utilities",children:"Utilities API"})," - Helper functions"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>t,x:()=>i});var s=l(6540);const o={},r=s.createContext(o);function t(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);