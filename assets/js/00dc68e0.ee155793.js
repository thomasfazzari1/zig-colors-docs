"use strict";(self.webpackChunkzig_colors_docs=self.webpackChunkzig_colors_docs||[]).push([[273],{4823:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>g,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"api/backgrounds","title":"Background Colors","description":"Documentation for background color functionality in zig-colors.","source":"@site/docs/api/backgrounds.md","sourceDirName":"api","slug":"/api/backgrounds","permalink":"/zig-colors-docs/next/api/backgrounds","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Background Colors","sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Text Styles","permalink":"/zig-colors-docs/next/api/styles"},"next":{"title":"RGB & Hex Colors","permalink":"/zig-colors-docs/next/api/rgb-hex"}}');var r=l(4848),o=l(8453);const t={title:"Background Colors",sidebar_position:3},c="Backgrounds API Reference",i={},d=[{value:"Background Methods",id:"background-methods",level:2},{value:"Style Background Methods",id:"style-background-methods",level:3},{value:"RGB Background Methods",id:"rgb-background-methods",level:3},{value:"Background Namespace",id:"background-namespace",level:2},{value:"bg Object",id:"bg-object",level:3},{value:"Color Combinations",id:"color-combinations",level:2},{value:"High Contrast Combinations",id:"high-contrast-combinations",level:3},{value:"Semantic Backgrounds",id:"semantic-backgrounds",level:3},{value:"Advanced Background Techniques",id:"advanced-background-techniques",level:2},{value:"Status Badges",id:"status-badges",level:3},{value:"Progress Bars",id:"progress-bars",level:3},{value:"Table Headers",id:"table-headers",level:3},{value:"Terminal Support",id:"terminal-support",level:2},{value:"Background Color Support",id:"background-color-support",level:3},{value:"Graceful Degradation",id:"graceful-degradation",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Contrast Ratio",id:"1-contrast-ratio",level:3},{value:"2. Accessibility",id:"2-accessibility",level:3},{value:"3. Consistent Meaning",id:"3-consistent-meaning",level:3},{value:"Common Patterns",id:"common-patterns",level:2},{value:"Highlighting",id:"highlighting",level:3},{value:"Diff Output",id:"diff-output",level:3},{value:"Selection Menu",id:"selection-menu",level:3},{value:"See Also",id:"see-also",level:2}];function a(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"backgrounds-api-reference",children:"Backgrounds API Reference"})}),"\n",(0,r.jsx)(n.p,{children:"Documentation for background color functionality in zig-colors."}),"\n",(0,r.jsx)(n.h2,{id:"background-methods",children:"Background Methods"}),"\n",(0,r.jsx)(n.h3,{id:"style-background-methods",children:"Style Background Methods"}),"\n",(0,r.jsxs)(n.p,{children:["Each ",(0,r.jsx)(n.code,{children:"Style"})," instance provides methods to set background colors:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:"pub fn bgBlack(self: Style) Style\npub fn bgRed(self: Style) Style\npub fn bgGreen(self: Style) Style\npub fn bgYellow(self: Style) Style\npub fn bgBlue(self: Style) Style\npub fn bgMagenta(self: Style) Style\npub fn bgCyan(self: Style) Style\npub fn bgWhite(self: Style) Style\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'// Simple background\nstd.debug.print("{}\\n", .{colors.white.bgRed().call("White on red")});\nstd.debug.print("{}\\n", .{colors.black.bgYellow().call("Black on yellow")});\n\n// With other styles\nstd.debug.print("{}\\n", .{colors.white.bgBlue().bold().call("Bold white on blue")});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"rgb-background-methods",children:"RGB Background Methods"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:"pub fn bgRgb(self: Style, r: u8, g: u8, b: u8) Style\npub fn bgHex(self: Style, hex_str: []const u8) Style\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parameters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"r"}),", ",(0,r.jsx)(n.code,{children:"g"}),", ",(0,r.jsx)(n.code,{children:"b"}),": RGB values (0-255)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"hex_str"}),': Hex color string (e.g., "#FF6B6B" or "FF6B6B")']}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'// RGB background\nstd.debug.print("{}\\n", .{colors.white.bgRgb(52, 73, 94).call("Custom background")});\n\n// Hex background\nstd.debug.print("{}\\n", .{colors.black.bgHex("#FFD700").call("Black on gold")});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"background-namespace",children:"Background Namespace"}),"\n",(0,r.jsx)(n.h3,{id:"bg-object",children:"bg Object"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:"pub const bg = Style.Bg;\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"bg"})," namespace provides an alternative syntax for creating backgrounds:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:"pub const BgStyle = struct {\n    pub fn black(self: BgStyle) Style\n    pub fn red(self: BgStyle) Style\n    pub fn green(self: BgStyle) Style\n    pub fn yellow(self: BgStyle) Style\n    pub fn blue(self: BgStyle) Style\n    pub fn magenta(self: BgStyle) Style\n    pub fn cyan(self: BgStyle) Style\n    pub fn white(self: BgStyle) Style\n    pub fn rgb(self: BgStyle, r: u8, g: u8, b: u8) Style\n    pub fn hex(self: BgStyle, hex_str: []const u8) Style\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'// Start with background, then add foreground\nstd.debug.print("{}\\n", .{colors.bg.red().white().call("White on red")});\nstd.debug.print("{}\\n", .{colors.bg.blue().yellow().bold().call("Bold yellow on blue")});\n\n// Custom colors\nstd.debug.print("{}\\n", .{colors.bg.hex("#2C3E50").white().call("White on dark")});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"color-combinations",children:"Color Combinations"}),"\n",(0,r.jsx)(n.h3,{id:"high-contrast-combinations",children:"High Contrast Combinations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:"// Good readability\ncolors.white.bgBlack()      // Maximum contrast\ncolors.black.bgWhite()      // Inverse maximum contrast\ncolors.yellow.bgBlue()      // Complementary colors\ncolors.white.bgRed()        // Alert/Error\ncolors.black.bgYellow()     // Warning\ncolors.white.bgGreen()      // Success\n\n// Poor readability (avoid these)\ncolors.blue.bgBlack()       // Too similar\ncolors.yellow.bgWhite()     // Low contrast\ncolors.red.bgMagenta()      // Similar hues\n"})}),"\n",(0,r.jsx)(n.h3,{id:"semantic-backgrounds",children:"Semantic Backgrounds"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'const Status = struct {\n    const error = colors.white.bgRed().bold();\n    const warning = colors.black.bgYellow();\n    const success = colors.white.bgGreen();\n    const info = colors.white.bgBlue();\n    const debug = colors.white.bgMagenta();\n};\n\n// Usage\nstd.debug.print("{}\\n", .{Status.error.call(" ERROR ")});\nstd.debug.print("{}\\n", .{Status.warning.call(" WARNING ")});\nstd.debug.print("{}\\n", .{Status.success.call(" SUCCESS ")});\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-background-techniques",children:"Advanced Background Techniques"}),"\n",(0,r.jsx)(n.h3,{id:"status-badges",children:"Status Badges"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'pub fn badge(label: []const u8, value: []const u8, bg_color: colors.Style) void {\n    // Dark background for label\n    std.debug.print("{}", .{colors.white.bgRgb(85, 85, 85).call(label)});\n    // Colored background for value\n    std.debug.print("{}\\n", .{bg_color.white().bold().call(value)});\n}\n\n// Usage\nbadge(" build ", " passing ", colors.bg.green());\nbadge(" tests ", " 142 ", colors.bg.blue());\nbadge(" coverage ", " 98% ", colors.bg.hex("#4CAF50"));\n'})}),"\n",(0,r.jsx)(n.h3,{id:"progress-bars",children:"Progress Bars"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'pub fn progressBar(percent: u8) void {\n    const width = 20;\n    const filled = @divFloor(percent * width, 100);\n\n    std.debug.print("[", .{});\n\n    var i: u8 = 0;\n    while (i < width) : (i += 1) {\n        if (i < filled) {\n            const bg = if (percent < 50)\n                colors.bg.red()\n            else if (percent < 80)\n                colors.bg.yellow()\n            else\n                colors.bg.green();\n\n            std.debug.print("{}", .{bg.call(" ")});\n        } else {\n            std.debug.print(" ", .{});\n        }\n    }\n\n    std.debug.print("] {}%\\n", .{percent});\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"table-headers",children:"Table Headers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'pub fn tableHeader(columns: []const []const u8) void {\n    const header_style = colors.white.bgBlue().bold();\n\n    for (columns, 0..) |col, i| {\n        if (i > 0) std.debug.print(" ", .{});\n        std.debug.print("{}", .{header_style.call(col)});\n    }\n    std.debug.print("\\n", .{});\n}\n\n// Usage\ntableHeader(&.{ " Name ", " Status ", " Time ", " Memory " });\n'})}),"\n",(0,r.jsx)(n.h2,{id:"terminal-support",children:"Terminal Support"}),"\n",(0,r.jsx)(n.h3,{id:"background-color-support",children:"Background Color Support"}),"\n",(0,r.jsx)(n.p,{children:"Different terminals have varying levels of background color support:"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Terminal"}),(0,r.jsx)(n.th,{children:"Basic Backgrounds"}),(0,r.jsx)(n.th,{children:"RGB Backgrounds"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Windows Terminal"}),(0,r.jsx)(n.td,{children:"\u2713"}),(0,r.jsx)(n.td,{children:"\u2713"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"PowerShell"}),(0,r.jsx)(n.td,{children:"\u2713"}),(0,r.jsx)(n.td,{children:"\u2717"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"macOS Terminal"}),(0,r.jsx)(n.td,{children:"\u2713"}),(0,r.jsx)(n.td,{children:"\u2717"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"iTerm2"}),(0,r.jsx)(n.td,{children:"\u2713"}),(0,r.jsx)(n.td,{children:"\u2713"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"GNOME Terminal"}),(0,r.jsx)(n.td,{children:"\u2713"}),(0,r.jsx)(n.td,{children:"\u2713"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Konsole"}),(0,r.jsx)(n.td,{children:"\u2713"}),(0,r.jsx)(n.td,{children:"\u2713"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"graceful-degradation",children:"Graceful Degradation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'pub fn adaptiveBackground(text: []const u8, rgb: RGB, fallback: Color) void {\n    const level = colors.getLevel();\n\n    const style = switch (level) {\n        .truecolor => colors.white.bgRgb(rgb.r, rgb.g, rgb.b),\n        .basic, .ansi256 => colors.white.withBg(fallback),\n        .none => colors.Style{},\n    };\n\n    std.debug.print("{}\\n", .{style.call(text)});\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-contrast-ratio",children:"1. Contrast Ratio"}),"\n",(0,r.jsx)(n.p,{children:"Ensure sufficient contrast between foreground and background:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:"// Good contrast\ncolors.white.bgBlack()\ncolors.black.bgWhite()\ncolors.yellow.bgBlue()\ncolors.white.bgRed()\n\n// Poor contrast (avoid)\ncolors.yellow.bgWhite()\ncolors.blue.bgBlack()\ncolors.cyan.bgBlue()\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-accessibility",children:"2. Accessibility"}),"\n",(0,r.jsx)(n.p,{children:"Consider colorblind users:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'// Use both color and symbols\npub fn statusIndicator(status: Status) void {\n    const indicator = switch (status) {\n        .success => colors.white.bgGreen().call(" \u2713 OK "),\n        .error => colors.white.bgRed().call(" \u2717 FAIL "),\n        .warning => colors.black.bgYellow().call(" \u26a0 WARN "),\n    };\n    std.debug.print("{}\\n", .{indicator});\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-consistent-meaning",children:"3. Consistent Meaning"}),"\n",(0,r.jsx)(n.p,{children:"Use backgrounds consistently throughout your application:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:"const BackgroundMeaning = struct {\n    const critical = colors.bg.red();\n    const warning = colors.bg.yellow();\n    const success = colors.bg.green();\n    const info = colors.bg.blue();\n    const muted = colors.bg.rgb(60, 60, 60);\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"common-patterns",children:"Common Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"highlighting",children:"Highlighting"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'pub fn highlight(text: []const u8, search: []const u8) void {\n    if (std.mem.indexOf(u8, text, search)) |index| {\n        std.debug.print("{s}", .{text[0..index]});\n        std.debug.print("{}", .{colors.black.bgYellow().call(search)});\n        std.debug.print("{s}", .{text[index + search.len..]});\n    } else {\n        std.debug.print("{s}", .{text});\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"diff-output",children:"Diff Output"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:"pub fn diffLine(prefix: u8, line: []const u8) void {\n    const style = switch (prefix) {\n        '+' => colors.white.bgGreen(),\n        '-' => colors.white.bgRed(),\n        '@' => colors.white.bgBlue(),\n        else => colors.Style{},\n    };\n\n    if (style.bg != null) {\n        std.debug.print(\"{}{s}\\n\", .{style.call(&[_]u8{prefix}), line});\n    } else {\n        std.debug.print(\"{c}{s}\\n\", .{prefix, line});\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"selection-menu",children:"Selection Menu"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-zig",children:'pub fn menuItem(text: []const u8, selected: bool) void {\n    if (selected) {\n        std.debug.print("{}\\n", .{colors.white.bgBlue().bold().call(text)});\n    } else {\n        std.debug.print("{s}\\n", .{text});\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/zig-colors-docs/next/api/colors",children:"Colors API"})," - Foreground color methods"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/zig-colors-docs/next/api/styles",children:"Styles API"})," - Text formatting options"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/zig-colors-docs/next/api/rgb-hex",children:"RGB & Hex API"})," - Custom color specifications"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/zig-colors-docs/next/api/utilities",children:"Utilities API"})," - Helper functions"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>t,x:()=>c});var s=l(6540);const r={},o=s.createContext(r);function t(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);